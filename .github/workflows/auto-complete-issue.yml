name: Auto Complete Issues

on:
  workflow_run:
    workflows: ["Smart Auto Create Issues on Push"]
    types:
      - completed
    branches:
      - main
      - master

jobs:
  auto-complete:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      issues: write
      pull-requests: write
      actions: read
    
    steps:
      - name: Get Issue Number
        uses: actions/github-script@v7
        id: get-issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('Getting issue number from previous workflow...');
            
            // Get the workflow run that triggered this
            const workflowRun = context.payload.workflow_run;
            console.log('Workflow run ID:', workflowRun.id);
            
            // Get the jobs from the workflow run
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: workflowRun.id
            });
            
            console.log('Found jobs:', jobs.data.jobs.length);
            
            // Find the create-issue job
            const createJob = jobs.data.jobs.find(job => job.name === 'create-issue');
            if (!createJob) {
              console.log('Create issue job not found');
              return;
            }
            
            console.log('Found create-issue job:', createJob.id);
            
            // Get the steps from the job
            const steps = await github.rest.actions.listJobStepsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              job_id: createJob.id
            });
            
            console.log('Found steps:', steps.data.steps.length);
            
            // Find the create-issue step
            const createStep = steps.data.steps.find(step => step.name === 'Create Issue');
            if (!createStep) {
              console.log('Create Issue step not found');
              return;
            }
            
            console.log('Found Create Issue step:', createStep.id);
            
            // Get the logs to extract issue number
            const logs = await github.rest.actions.downloadJobLogsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              job_id: createJob.id
            });
            
            console.log('Got logs, length:', logs.data.length);
            
            // Parse logs to find issue number
            const logLines = logs.data.split('\n');
            let issueNumber = null;
            
            for (const line of logLines) {
              if (line.includes('Issue created successfully: #')) {
                const match = line.match(/Issue created successfully: #(\d+)/);
                if (match) {
                  issueNumber = match[1];
                  break;
                }
              }
            }
            
            if (issueNumber) {
              console.log('Found issue number:', issueNumber);
              core.setOutput('issue-number', issueNumber);
            } else {
              console.log('Issue number not found in logs');
            }
      
      - name: Auto Complete Issue
        if: steps.get-issue.outputs.issue-number != '' && steps.get-issue.outputs.issue-number != 'null'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('Starting auto-complete process...');
            
            const issueNumber = '${{ steps.get-issue.outputs.issue-number }}';
            
            if (!issueNumber || issueNumber === '' || issueNumber === 'null') {
              console.log('No valid issue number found, skipping auto-complete');
              return;
            }
            
            console.log('Auto-completing issue #' + issueNumber);
            
            // Wait for 10 seconds
            console.log('Waiting 10 seconds before auto-completing...');
            await new Promise(resolve => setTimeout(resolve, 10000));
            
            try {
              console.log('Auto-completing issue #' + issueNumber + ' after 10 seconds...');
              
              // Update issue body to complete status
              const completeBody = '## Auto Complete Finished\n\n' +
                '**Status:** Complete\n' +
                '**Completion Time:** ' + new Date().toLocaleString() + '\n' +
                '**Progress:** 100% Complete\n\n' +
                '> This issue has been automatically completed!\n' +
                '> Auto-complete process finished successfully\n\n' +
                '---\n' +
                '*This issue was automatically completed by GitHub Actions.*';
              
              console.log('Updating issue body to complete status...');
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber),
                body: completeBody,
                state: 'closed'
              });
              
              console.log('Issue #' + issueNumber + ' status updated to closed');
              
              // Add completion comment
              const completeComment = '## Issue Auto Complete\n\n' +
                'This issue has been automatically completed.\n\n' +
                '**Status:** Auto Complete\n' +
                '**Triggered by:** Push to `' + context.payload.workflow_run.head_branch + '` branch\n' +
                '**Completion Time:** ' + new Date().toLocaleString() + '\n\n' +
                '**Reason:** Changes have been successfully processed and deployed.\n\n' +
                '---\n' +
                '*This comment was automatically added by GitHub Actions.*';
              
              console.log('Adding completion comment...');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber),
                body: completeComment
              });
              
              console.log('Issue #' + issueNumber + ' auto-completed successfully');
              console.log('Auto-complete process finished for issue #' + issueNumber);
            } catch (error) {
              console.error('Failed to auto-complete issue #' + issueNumber + ':', error.message);
            }
